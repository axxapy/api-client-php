<?php
/**
 * IntegrationsApi
 * PHP version 5
 *
 * @category Class
 * @package  LaunchDarklyApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 3.9.0
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LaunchDarklyApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LaunchDarklyApi\ApiException;
use LaunchDarklyApi\Configuration;
use LaunchDarklyApi\HeaderSelector;
use LaunchDarklyApi\ObjectSerializer;

/**
 * IntegrationsApi Class Doc Comment
 *
 * @category Class
 * @package  LaunchDarklyApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteIntegrationSubscription
     *
     * Delete an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIntegrationSubscription($integration_key, $integration_id)
    {
        $this->deleteIntegrationSubscriptionWithHttpInfo($integration_key, $integration_id);
    }

    /**
     * Operation deleteIntegrationSubscriptionWithHttpInfo
     *
     * Delete an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIntegrationSubscriptionWithHttpInfo($integration_key, $integration_id)
    {
        $returnType = '';
        $request = $this->deleteIntegrationSubscriptionRequest($integration_key, $integration_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIntegrationSubscriptionAsync
     *
     * Delete an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIntegrationSubscriptionAsync($integration_key, $integration_id)
    {
        return $this->deleteIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $integration_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIntegrationSubscriptionAsyncWithHttpInfo
     *
     * Delete an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $integration_id)
    {
        $returnType = '';
        $request = $this->deleteIntegrationSubscriptionRequest($integration_key, $integration_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIntegrationSubscription'
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteIntegrationSubscriptionRequest($integration_key, $integration_id)
    {
        // verify the required parameter 'integration_key' is set
        if ($integration_key === null || (is_array($integration_key) && count($integration_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_key when calling deleteIntegrationSubscription'
            );
        }
        // verify the required parameter 'integration_id' is set
        if ($integration_id === null || (is_array($integration_id) && count($integration_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_id when calling deleteIntegrationSubscription'
            );
        }

        $resourcePath = '/integrations/{integrationKey}/{integrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_key !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationKey' . '}',
                ObjectSerializer::toPathValue($integration_key),
                $resourcePath
            );
        }
        // path params
        if ($integration_id !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationId' . '}',
                ObjectSerializer::toPathValue($integration_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIntegrationSubscription
     *
     * Get a single integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LaunchDarklyApi\Model\IntegrationSubscription
     */
    public function getIntegrationSubscription($integration_key, $integration_id)
    {
        list($response) = $this->getIntegrationSubscriptionWithHttpInfo($integration_key, $integration_id);
        return $response;
    }

    /**
     * Operation getIntegrationSubscriptionWithHttpInfo
     *
     * Get a single integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LaunchDarklyApi\Model\IntegrationSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIntegrationSubscriptionWithHttpInfo($integration_key, $integration_id)
    {
        $returnType = '\LaunchDarklyApi\Model\IntegrationSubscription';
        $request = $this->getIntegrationSubscriptionRequest($integration_key, $integration_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\IntegrationSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\UsageError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIntegrationSubscriptionAsync
     *
     * Get a single integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntegrationSubscriptionAsync($integration_key, $integration_id)
    {
        return $this->getIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $integration_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIntegrationSubscriptionAsyncWithHttpInfo
     *
     * Get a single integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $integration_id)
    {
        $returnType = '\LaunchDarklyApi\Model\IntegrationSubscription';
        $request = $this->getIntegrationSubscriptionRequest($integration_key, $integration_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIntegrationSubscription'
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIntegrationSubscriptionRequest($integration_key, $integration_id)
    {
        // verify the required parameter 'integration_key' is set
        if ($integration_key === null || (is_array($integration_key) && count($integration_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_key when calling getIntegrationSubscription'
            );
        }
        // verify the required parameter 'integration_id' is set
        if ($integration_id === null || (is_array($integration_id) && count($integration_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_id when calling getIntegrationSubscription'
            );
        }

        $resourcePath = '/integrations/{integrationKey}/{integrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_key !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationKey' . '}',
                ObjectSerializer::toPathValue($integration_key),
                $resourcePath
            );
        }
        // path params
        if ($integration_id !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationId' . '}',
                ObjectSerializer::toPathValue($integration_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIntegrationSubscriptions
     *
     * Get a list of all configured integrations of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LaunchDarklyApi\Model\Integration
     */
    public function getIntegrationSubscriptions($integration_key)
    {
        list($response) = $this->getIntegrationSubscriptionsWithHttpInfo($integration_key);
        return $response;
    }

    /**
     * Operation getIntegrationSubscriptionsWithHttpInfo
     *
     * Get a list of all configured integrations of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LaunchDarklyApi\Model\Integration, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIntegrationSubscriptionsWithHttpInfo($integration_key)
    {
        $returnType = '\LaunchDarklyApi\Model\Integration';
        $request = $this->getIntegrationSubscriptionsRequest($integration_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\Integration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\UsageError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIntegrationSubscriptionsAsync
     *
     * Get a list of all configured integrations of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntegrationSubscriptionsAsync($integration_key)
    {
        return $this->getIntegrationSubscriptionsAsyncWithHttpInfo($integration_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIntegrationSubscriptionsAsyncWithHttpInfo
     *
     * Get a list of all configured integrations of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntegrationSubscriptionsAsyncWithHttpInfo($integration_key)
    {
        $returnType = '\LaunchDarklyApi\Model\Integration';
        $request = $this->getIntegrationSubscriptionsRequest($integration_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIntegrationSubscriptions'
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIntegrationSubscriptionsRequest($integration_key)
    {
        // verify the required parameter 'integration_key' is set
        if ($integration_key === null || (is_array($integration_key) && count($integration_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_key when calling getIntegrationSubscriptions'
            );
        }

        $resourcePath = '/integrations/{integrationKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_key !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationKey' . '}',
                ObjectSerializer::toPathValue($integration_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIntegrations
     *
     * Get a list of all configured audit log event integrations associated with this account.
     *
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LaunchDarklyApi\Model\Integrations
     */
    public function getIntegrations()
    {
        list($response) = $this->getIntegrationsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getIntegrationsWithHttpInfo
     *
     * Get a list of all configured audit log event integrations associated with this account.
     *
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LaunchDarklyApi\Model\Integrations, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIntegrationsWithHttpInfo()
    {
        $returnType = '\LaunchDarklyApi\Model\Integrations';
        $request = $this->getIntegrationsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\Integrations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\UsageError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIntegrationsAsync
     *
     * Get a list of all configured audit log event integrations associated with this account.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntegrationsAsync()
    {
        return $this->getIntegrationsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIntegrationsAsyncWithHttpInfo
     *
     * Get a list of all configured audit log event integrations associated with this account.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntegrationsAsyncWithHttpInfo()
    {
        $returnType = '\LaunchDarklyApi\Model\Integrations';
        $request = $this->getIntegrationsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIntegrations'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIntegrationsRequest()
    {

        $resourcePath = '/integrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchIntegrationSubscription
     *
     * Modify an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     * @param  \LaunchDarklyApi\Model\PatchOperation[] $patch_delta Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LaunchDarklyApi\Model\IntegrationSubscription
     */
    public function patchIntegrationSubscription($integration_key, $integration_id, $patch_delta)
    {
        list($response) = $this->patchIntegrationSubscriptionWithHttpInfo($integration_key, $integration_id, $patch_delta);
        return $response;
    }

    /**
     * Operation patchIntegrationSubscriptionWithHttpInfo
     *
     * Modify an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     * @param  \LaunchDarklyApi\Model\PatchOperation[] $patch_delta Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LaunchDarklyApi\Model\IntegrationSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchIntegrationSubscriptionWithHttpInfo($integration_key, $integration_id, $patch_delta)
    {
        $returnType = '\LaunchDarklyApi\Model\IntegrationSubscription';
        $request = $this->patchIntegrationSubscriptionRequest($integration_key, $integration_id, $patch_delta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\IntegrationSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchIntegrationSubscriptionAsync
     *
     * Modify an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     * @param  \LaunchDarklyApi\Model\PatchOperation[] $patch_delta Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchIntegrationSubscriptionAsync($integration_key, $integration_id, $patch_delta)
    {
        return $this->patchIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $integration_id, $patch_delta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchIntegrationSubscriptionAsyncWithHttpInfo
     *
     * Modify an integration subscription by ID.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     * @param  \LaunchDarklyApi\Model\PatchOperation[] $patch_delta Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $integration_id, $patch_delta)
    {
        $returnType = '\LaunchDarklyApi\Model\IntegrationSubscription';
        $request = $this->patchIntegrationSubscriptionRequest($integration_key, $integration_id, $patch_delta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchIntegrationSubscription'
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  string $integration_id The integration ID. (required)
     * @param  \LaunchDarklyApi\Model\PatchOperation[] $patch_delta Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchIntegrationSubscriptionRequest($integration_key, $integration_id, $patch_delta)
    {
        // verify the required parameter 'integration_key' is set
        if ($integration_key === null || (is_array($integration_key) && count($integration_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_key when calling patchIntegrationSubscription'
            );
        }
        // verify the required parameter 'integration_id' is set
        if ($integration_id === null || (is_array($integration_id) && count($integration_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_id when calling patchIntegrationSubscription'
            );
        }
        // verify the required parameter 'patch_delta' is set
        if ($patch_delta === null || (is_array($patch_delta) && count($patch_delta) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_delta when calling patchIntegrationSubscription'
            );
        }

        $resourcePath = '/integrations/{integrationKey}/{integrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_key !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationKey' . '}',
                ObjectSerializer::toPathValue($integration_key),
                $resourcePath
            );
        }
        // path params
        if ($integration_id !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationId' . '}',
                ObjectSerializer::toPathValue($integration_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($patch_delta)) {
            $_tempBody = $patch_delta;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postIntegrationSubscription
     *
     * Create a new integration subscription of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  \LaunchDarklyApi\Model\SubscriptionBody $subscription_body Create a new integration subscription. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LaunchDarklyApi\Model\IntegrationSubscription
     */
    public function postIntegrationSubscription($integration_key, $subscription_body)
    {
        list($response) = $this->postIntegrationSubscriptionWithHttpInfo($integration_key, $subscription_body);
        return $response;
    }

    /**
     * Operation postIntegrationSubscriptionWithHttpInfo
     *
     * Create a new integration subscription of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  \LaunchDarklyApi\Model\SubscriptionBody $subscription_body Create a new integration subscription. (required)
     *
     * @throws \LaunchDarklyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LaunchDarklyApi\Model\IntegrationSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function postIntegrationSubscriptionWithHttpInfo($integration_key, $subscription_body)
    {
        $returnType = '\LaunchDarklyApi\Model\IntegrationSubscription';
        $request = $this->postIntegrationSubscriptionRequest($integration_key, $subscription_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LaunchDarklyApi\Model\IntegrationSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postIntegrationSubscriptionAsync
     *
     * Create a new integration subscription of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  \LaunchDarklyApi\Model\SubscriptionBody $subscription_body Create a new integration subscription. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIntegrationSubscriptionAsync($integration_key, $subscription_body)
    {
        return $this->postIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $subscription_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postIntegrationSubscriptionAsyncWithHttpInfo
     *
     * Create a new integration subscription of a given kind.
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  \LaunchDarklyApi\Model\SubscriptionBody $subscription_body Create a new integration subscription. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIntegrationSubscriptionAsyncWithHttpInfo($integration_key, $subscription_body)
    {
        $returnType = '\LaunchDarklyApi\Model\IntegrationSubscription';
        $request = $this->postIntegrationSubscriptionRequest($integration_key, $subscription_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postIntegrationSubscription'
     *
     * @param  string $integration_key The key used to specify the integration kind. (required)
     * @param  \LaunchDarklyApi\Model\SubscriptionBody $subscription_body Create a new integration subscription. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postIntegrationSubscriptionRequest($integration_key, $subscription_body)
    {
        // verify the required parameter 'integration_key' is set
        if ($integration_key === null || (is_array($integration_key) && count($integration_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_key when calling postIntegrationSubscription'
            );
        }
        // verify the required parameter 'subscription_body' is set
        if ($subscription_body === null || (is_array($subscription_body) && count($subscription_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_body when calling postIntegrationSubscription'
            );
        }

        $resourcePath = '/integrations/{integrationKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_key !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationKey' . '}',
                ObjectSerializer::toPathValue($integration_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($subscription_body)) {
            $_tempBody = $subscription_body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
