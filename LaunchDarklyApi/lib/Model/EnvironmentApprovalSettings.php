<?php
/**
 * EnvironmentApprovalSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  LaunchDarklyApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LaunchDarklyApi\Model;

use \ArrayAccess;
use \LaunchDarklyApi\ObjectSerializer;

/**
 * EnvironmentApprovalSettings Class Doc Comment
 *
 * @category Class
 * @description Approval settings for an environment. Only appears if the approvals feature is enabled.
 * @package  LaunchDarklyApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvironmentApprovalSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Environment_approvalSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'service_kind' => 'string',
        'required' => 'bool',
        'can_review_own_request' => 'bool',
        'min_num_approvals' => 'int',
        'can_apply_declined_changes' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'service_kind' => null,
        'required' => null,
        'can_review_own_request' => null,
        'min_num_approvals' => 'int64',
        'can_apply_declined_changes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_kind' => 'serviceKind',
        'required' => 'required',
        'can_review_own_request' => 'canReviewOwnRequest',
        'min_num_approvals' => 'minNumApprovals',
        'can_apply_declined_changes' => 'canApplyDeclinedChanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_kind' => 'setServiceKind',
        'required' => 'setRequired',
        'can_review_own_request' => 'setCanReviewOwnRequest',
        'min_num_approvals' => 'setMinNumApprovals',
        'can_apply_declined_changes' => 'setCanApplyDeclinedChanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_kind' => 'getServiceKind',
        'required' => 'getRequired',
        'can_review_own_request' => 'getCanReviewOwnRequest',
        'min_num_approvals' => 'getMinNumApprovals',
        'can_apply_declined_changes' => 'getCanApplyDeclinedChanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SERVICE_KIND_LAUNCHDARKLY = 'launchdarkly';
    const SERVICE_KIND_SERVICE_NOW = 'service-now';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceKindAllowableValues()
    {
        return [
            self::SERVICE_KIND_LAUNCHDARKLY,
            self::SERVICE_KIND_SERVICE_NOW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_kind'] = isset($data['service_kind']) ? $data['service_kind'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['can_review_own_request'] = isset($data['can_review_own_request']) ? $data['can_review_own_request'] : null;
        $this->container['min_num_approvals'] = isset($data['min_num_approvals']) ? $data['min_num_approvals'] : null;
        $this->container['can_apply_declined_changes'] = isset($data['can_apply_declined_changes']) ? $data['can_apply_declined_changes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getServiceKindAllowableValues();
        if (!is_null($this->container['service_kind']) && !in_array($this->container['service_kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_kind
     *
     * @return string
     */
    public function getServiceKind()
    {
        return $this->container['service_kind'];
    }

    /**
     * Sets service_kind
     *
     * @param string $service_kind The approvals system used.
     *
     * @return $this
     */
    public function setServiceKind($service_kind)
    {
        $allowedValues = $this->getServiceKindAllowableValues();
        if (!is_null($service_kind) && !in_array($service_kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_kind'] = $service_kind;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required Whether any changes to flags in this environment will require approval.
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets can_review_own_request
     *
     * @return bool
     */
    public function getCanReviewOwnRequest()
    {
        return $this->container['can_review_own_request'];
    }

    /**
     * Sets can_review_own_request
     *
     * @param bool $can_review_own_request Whether requesters can approve or decline their own request. They may always comment.
     *
     * @return $this
     */
    public function setCanReviewOwnRequest($can_review_own_request)
    {
        $this->container['can_review_own_request'] = $can_review_own_request;

        return $this;
    }

    /**
     * Gets min_num_approvals
     *
     * @return int
     */
    public function getMinNumApprovals()
    {
        return $this->container['min_num_approvals'];
    }

    /**
     * Sets min_num_approvals
     *
     * @param int $min_num_approvals The number of approvals required before an approval request can be applied.
     *
     * @return $this
     */
    public function setMinNumApprovals($min_num_approvals)
    {
        $this->container['min_num_approvals'] = $min_num_approvals;

        return $this;
    }

    /**
     * Gets can_apply_declined_changes
     *
     * @return bool
     */
    public function getCanApplyDeclinedChanges()
    {
        return $this->container['can_apply_declined_changes'];
    }

    /**
     * Sets can_apply_declined_changes
     *
     * @param bool $can_apply_declined_changes Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request.
     *
     * @return $this
     */
    public function setCanApplyDeclinedChanges($can_apply_declined_changes)
    {
        $this->container['can_apply_declined_changes'] = $can_apply_declined_changes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


